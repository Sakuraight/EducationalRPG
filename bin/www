#!/usr/bin/env node
var debug = require('debug')('chat');
var app = require('../app');
var User = require('../models/user.js');
var Problem = require('../models/problem.js');
app.set('port', process.env.PORT || 3000);

var server = app.listen(app.get('port'), function() {
   debug('Express server listening on port ' + server.address().port);
});

var io = require('socket.io')(server);
 io.on('connection', function(socket){
 	socket.on("updateState", function(data) {
 		console.log("state:" + data.status);
 		console.log("uid:" + data.uid);
 		console.log("name:" + data.displayName);
 		var uid = data.uid;
 		var status = data.status;
 		var displayName = data.displayName;
 		User.findOneAndUpdate({
      		uid: uid
    		}, {
      	$set: {
        		uid: uid,
        		displayName: displayName,
        		status: status
      		}
    		}, {
      		upsert: true
    		}, function(err, user) {
      		console.log("findOneAndUpdate err:", err, "user: ", user);
    		});
 	});

 	socket.on('fetchDB', function(record){
		//TODO: 問題が全て出揃ったら，data.subject, data.chapter, data.difficultyをfind()の中身指定でrecordを引っ張る処理を記述
		Problem.find(function(err, records){
      		socket.emit('returnRecord', records);
    		});
	});
 });
